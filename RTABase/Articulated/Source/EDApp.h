////////////////////////////////////////////////////////////////////////////////
// EDApp.h
////////////////////////////////////////////////////////////////////////////////
#ifndef _EDAPP_H_
#define _EDAPP_H_

#include <vector>

#include "Glee.h"
#include <gl/glu.h>

#include "AppConfig.h"
#include "EDCamera.h"
#include "Animation.h"
#include "Interpolator.h"
#include "Mesh.h"

template < typename T >
struct matrix4;
typedef matrix4<float> matrix4f;

class EDApp
{
    EDCamera m_Camera;
    EDFrame m_CameraFrame;

	Animation< matrix4f > m_Animation;
	Interpolator< matrix4f > m_Interpolator;
	std::vector< Mesh > meshes;

    EDApp( ){ }
    ~EDApp( ){ }

public:

    //////////////////////////////////////////////////////////////////////////
    // This function gets the instance of the singleton.
    // 
    // Returns
	// EDApp& the instance of the singleton.
    //////////////////////////////////////////////////////////////////////////
    static EDApp& GetInstance( )
    {
        static EDApp instance;
        return instance;
    }

    //////////////////////////////////////////////////////////////////////////
    // This function initalizes opengl and the demo app
    //////////////////////////////////////////////////////////////////////////
    void Initialize( );

	//////////////////////////////////////////////////////////////////////////
	// Shuts the App down
	//////////////////////////////////////////////////////////////////////////
	void Shutdown( );

    //////////////////////////////////////////////////////////////////////////
    // This is to be called when a 
    // repaint is needed.
    //////////////////////////////////////////////////////////////////////////
    void Update( );

    EDCamera& GetCamera( ) { return m_Camera; }
};

#endif // _EDAPP_H_